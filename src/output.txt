[38;5;205m[38;5;205m----------[ [38;5;187mBanner[38;5;205m ]------------------------------------------------------------------------

 [38;5;187m    â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ                          â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ    â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ      â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ   [38;5;205m
 [38;5;187m  â–ˆâ–ˆâ–ˆâ–‘â–‘â–‘â–‘â–ˆâ–ˆâ–ˆ                       â–ˆâ–ˆâ–ˆâ–‘â–‘â–‘â–‘â–‘â–ˆâ–ˆâ–ˆ  â–ˆâ–ˆâ–ˆâ–‘â–‘â–‘â–‘â–‘â–ˆâ–ˆâ–ˆ â–‘â–‘â–ˆâ–ˆâ–ˆâ–‘â–‘â–‘â–‘â–‘â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆâ–‘â–‘â–‘â–‘â–ˆâ–ˆâ–ˆ [38;5;205m
 [38;5;187m â–ˆâ–ˆâ–ˆ    â–‘â–‘â–ˆâ–ˆâ–ˆ â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ â–ˆâ–ˆâ–ˆâ–ˆ  â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  â–‘â–ˆâ–ˆâ–ˆ    â–‘â–‘â–‘  â–‘â–ˆâ–ˆâ–ˆ    â–‘â–ˆâ–ˆâ–ˆ  â–‘â–ˆâ–ˆâ–ˆ    â–‘â–ˆâ–ˆâ–ˆ  â–ˆâ–ˆâ–ˆ    â–‘â–‘â–ˆâ–ˆâ–ˆ[38;5;205m
 [38;5;187mâ–‘â–ˆâ–ˆâ–ˆ     â–‘â–ˆâ–ˆâ–ˆâ–‘â–‘â–ˆâ–ˆâ–ˆ â–‘â–ˆâ–ˆâ–ˆ  â–‘â–‘â–‘â–‘â–‘â–ˆâ–ˆâ–ˆ â–‘â–‘â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  â–‘â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  â–‘â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  â–‘â–ˆâ–ˆâ–ˆ     â–‘â–ˆâ–ˆâ–ˆ[38;5;205m
 [38;5;187mâ–‘â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–‘â–ˆâ–ˆâ–ˆ â–‘â–ˆâ–ˆâ–ˆ â–‘â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–ˆâ–ˆâ–ˆ â–‘â–ˆâ–ˆâ–ˆâ–‘â–‘â–‘â–‘â–‘â–ˆâ–ˆâ–ˆ  â–‘â–ˆâ–ˆâ–ˆâ–‘â–‘â–‘â–‘â–‘â–ˆâ–ˆâ–ˆ â–‘â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–‘â–ˆâ–ˆâ–ˆ[38;5;205m
 [38;5;187mâ–‘â–‘â–ˆâ–ˆâ–ˆ â–‘â–‘â–ˆâ–ˆâ–ˆâ–ˆ  â–‘â–ˆâ–ˆâ–ˆ â–‘â–ˆâ–ˆâ–ˆ  â–ˆâ–ˆâ–ˆâ–‘â–‘â–ˆâ–ˆâ–ˆ  â–ˆâ–ˆâ–ˆ    â–‘â–ˆâ–ˆâ–ˆ â–‘â–ˆâ–ˆâ–ˆ    â–‘â–ˆâ–ˆâ–ˆ  â–‘â–ˆâ–ˆâ–ˆ    â–‘â–ˆâ–ˆâ–ˆ â–‘â–‘â–ˆâ–ˆâ–ˆ â–‘â–‘â–ˆâ–ˆâ–ˆâ–ˆ [38;5;205m
 [38;5;187m â–‘â–‘â–‘â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–‘â–ˆâ–ˆ â–‘â–‘â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–‘â–‘â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–‘â–‘â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ â–‘â–‘â–‘â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–‘â–ˆâ–ˆ[38;5;205m
 [38;5;187m   â–‘â–‘â–‘â–‘â–‘â–‘ â–‘â–‘   â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘  â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘  â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘  â–‘â–‘â–‘â–‘â–‘   â–‘â–‘â–‘â–‘â–‘ â–‘â–‘â–‘â–‘â–‘   â–‘â–‘â–‘â–‘â–‘    â–‘â–‘â–‘â–‘â–‘â–‘ â–‘â–‘ [38;5;205m
 [38;5;187m   CopyrightÂ© Muhammad Osama Mahmoud                                              v1.0[38;5;205m

[38;5;205m----------[ [38;5;187mOptions[38;5;205m ]-----------------------------------------------------------------------
  [38;5;187mprint-step-tableau:[38;5;124moff [38;5;205m [38;5;187mprint-gates:[38;5;34mon [38;5;205m [38;5;187mverbose[38;5;34m<1>[38;5;205m [38;5;187mwrite-circuit[38;5;34m<2>[38;5;205m
  [38;5;187mqubits[38;5;34m<20>[38;5;205m [38;5;187mdepth[38;5;34m<20>[38;5;205m [38;5;187mM[38;5;34m<0.20>[38;5;205m
[38;5;205m----------[ [38;5;187mBuild[38;5;205m ]-------------------------------------------------------------------------
Available CPU: [38;5;106mAMD Ryzen 9 7900X 12-Core Processor            [38;5;205m
Available system memory: [38;5;106m62 GB[38;5;205m
Available GPU: [38;5;106m1 x NVIDIA GeForce RTX 4090 @ 2.62GHz (compute cap: 8.9)[38;5;205m
Available GPU Multiprocessors: [38;5;106m128 MPs (128 cores/MP)[38;5;205m
Available GPU threads and blocks: [38;5;106m196608 threads, 3072 blocks[38;5;205m
Available Global memory: [38;5;106m23 GB[38;5;205m
[38;5;205m----------[ [38;5;187mInitial[38;5;205m ]-----------------------------------------------------------------------
GPU memory pool of 22927 MB is created successfully.
Initializing GPU memory pool to 0.. done.
Generating random circuit for [38;5;106m20 qubits[38;5;205m and [38;5;106m20-level[38;5;205m depth.. done.
Generated a total of [38;5;106m169 gates[38;5;205m with a maximum of [38;5;106m19 parallel gates[38;5;205m.
Opening "[38;5;106mq20_d20.chp[38;5;205m" circuit file for writing..done.
Writing circuit with [38;5;106m20 qubits[38;5;205m and [38;5;106m20 depth[38;5;205m..done.
CPU memory pool of 1 KB is created successfully.
Opening "[38;5;106mkernel.config[38;5;205m" kernel configuration file..done.
Read best identity configuration with %-49800.0 accuracy: grid(3076), block(512)
Read best step configuration with %-49800.0 accuracy: grid(87, 55), block(2, 64)
Allocating 3 GPU streams..done.
Allocating tableau for [38;5;106m20 qubits[38;5;205m.. (reserved 0 MB, 1 partitions). done.
Partition 0: Creating '0' initial state  for size 20 and offset 0 using grid(3076) and block(512).. done.
[38;5;205m----------[ [38;5;187mSimulation[38;5;205m ]--------------------------------------------------------------------
Partition 0, step 0: Copying 11 references and 36 buckets (offset by +0) per depth level 0 asynchroneously.. done.
 Gates on GPU for 0-time step:
 Gate(  0 , r:  0):  CX(1  ,17 )
 Gate(  1 , r:  4):  S(2  )
 Gate(  2 , r:  7):  CX(3  ,15 )
 Gate(  3 , r: 11):  H(4  )
 Gate(  4 , r: 14):  H(7  )
 Gate(  5 , r: 17):  S(8  )
 Gate(  6 , r: 20):  H(10 )
 Gate(  7 , r: 23):  H(12 )
 Gate(  8 , r: 26):  S(14 )
 Gate(  9 , r: 29):  S(16 )
 Gate( 10 , r: 32):  CX(18 ,19 )
Partition 0, step 0: Simulating asynchronously using grid(87, 55) and block(2, 64).. done.
Partition 0, step 1: Copying 6 references and 18 buckets (offset by +36) per depth level 1 asynchroneously.. done.
 Gates on GPU for 1-time step:
 Gate(  0 , r:  0):  M(0  , p: -1 , m: 255)
 Gate(  1 , r:  3):  M(5  , p: -1 , m: 255)
 Gate(  2 , r:  6):  M(6  , p: -1 , m: 255)
 Gate(  3 , r:  9):  M(9  , p: -1 , m: 255)
 Gate(  4 , r: 12):  M(11 , p: -1 , m: 255)
 Gate(  5 , r: 15):  M(13 , p: -1 , m: 255)

depth 1 has 6 measurements
After checking determinism:  Gates on GPU for 1-time step:
 Gate(  0 , r:  0):  M(0  , p: -1 , m: 255)
 Gate(  1 , r:  3):  M(5  , p: -1 , m: 255)
 Gate(  2 , r:  6):  M(6  , p: -1 , m: 255)
 Gate(  3 , r:  9):  M(9  , p: -1 , m: 255)
 Gate(  4 , r: 12):  M(11 , p: -1 , m: 255)
 Gate(  5 , r: 15):  M(13 , p: -1 , m: 255)
After determinate measuring:  Gates on GPU for 1-time step:
  M(0  , p: -1 , m: 0)--> Row(20):   00000000000000000000 10000000000000000000 0
  M(5  , p: -1 , m: 0)--> Row(25):   00000000000000000000 00000100000000000000 0
  M(6  , p: -1 , m: 0)--> Row(26):   00000000000000000000 00000010000000000000 0
  M(9  , p: -1 , m: 0)--> Row(29):   00000000000000000000 00000000010000000000 0
  M(11 , p: -1 , m: 0)--> Row(31):   00000000000000000000 00000000000100000000 0
  M(13 , p: -1 , m: 0)--> Row(33):   00000000000000000000 00000000000001000000 0
 Gate(  0 , r:  0):  M(0  , p: -1 , m: 0)
 Gate(  1 , r:  3):  M(5  , p: -1 , m: 0)
 Gate(  2 , r:  6):  M(6  , p: -1 , m: 0)
 Gate(  3 , r:  9):  M(9  , p: -1 , m: 0)
 Gate(  4 , r: 12):  M(11 , p: -1 , m: 0)
 Gate(  5 , r: 15):  M(13 , p: -1 , m: 0)
Partition 0, step 2: Copying 11 references and 37 buckets (offset by +54) per depth level 2 asynchroneously.. done.
 Gates on GPU for 2-time step:
 Gate(  0 , r:  0):  H(1  )
 Gate(  1 , r:  3):  S(3  )
 Gate(  2 , r:  6):  H(4  )
 Gate(  3 , r:  9):  H(5  )
 Gate(  4 , r: 12):  S(6  )
 Gate(  5 , r: 15):  H(7  )
 Gate(  6 , r: 18):  CX(9  ,17 )
 Gate(  7 , r: 22):  CX(10 ,14 )
 Gate(  8 , r: 26):  CX(12 ,18 )
 Gate(  9 , r: 30):  CX(13 ,19 )
 Gate( 10 , r: 34):  S(15 )
Partition 0, step 2: Simulating asynchronously using grid(87, 55) and block(2, 64).. done.
Partition 0, step 3: Copying 4 references and 12 buckets (offset by +91) per depth level 3 asynchroneously.. done.
 Gates on GPU for 3-time step:
 Gate(  0 , r:  0):  M(0  , p: -1 , m: 255)
 Gate(  1 , r:  3):  M(2  , p: -1 , m: 255)
 Gate(  2 , r:  6):  M(8  , p: -1 , m: 255)
 Gate(  3 , r:  9):  M(11 , p: -1 , m: 255)

depth 3 has 4 measurements
After checking determinism:  Gates on GPU for 3-time step:
 Gate(  0 , r:  0):  M(0  , p: -1 , m: 255)
 Gate(  1 , r:  3):  M(2  , p: -1 , m: 255)
 Gate(  2 , r:  6):  M(8  , p: -1 , m: 255)
 Gate(  3 , r:  9):  M(11 , p: -1 , m: 255)
After determinate measuring:  Gates on GPU for 3-time step:
  M(0  , p: -1 , m: 0)--> Row(20):   00000000000000000000 10000000000000000000 0
  M(2  , p: -1 , m: 0)--> Row(22):   00000000000000000000 00100000000000000000 0
  M(8  , p: -1 , m: 0)--> Row(28):   00000000000000000000 00000000100000000000 0
  M(11 , p: -1 , m: 0)--> Row(31):   00000000000000000000 00000000000100000000 0
 Gate(  0 , r:  0):  M(0  , p: -1 , m: 0)
 Gate(  1 , r:  3):  M(2  , p: -1 , m: 0)
 Gate(  2 , r:  6):  M(8  , p: -1 , m: 0)
 Gate(  3 , r:  9):  M(11 , p: -1 , m: 0)
Partition 0, step 4: Copying 9 references and 31 buckets (offset by +103) per depth level 4 asynchroneously.. done.
 Gates on GPU for 4-time step:
 Gate(  0 , r:  0):  CX(0  ,9  )
 Gate(  1 , r:  4):  S(2  )
 Gate(  2 , r:  7):  S(4  )
 Gate(  3 , r: 10):  H(6  )
 Gate(  4 , r: 13):  CX(7  ,10 )
 Gate(  5 , r: 17):  H(8  )
 Gate(  6 , r: 20):  CX(12 ,14 )
 Gate(  7 , r: 24):  CX(16 ,19 )
 Gate(  8 , r: 28):  S(18 )
Partition 0, step 4: Simulating asynchronously using grid(87, 55) and block(2, 64).. done.
Partition 0, step 5: Copying 7 references and 21 buckets (offset by +134) per depth level 5 asynchroneously.. done.
 Gates on GPU for 5-time step:
 Gate(  0 , r:  0):  M(1  , p: -1 , m: 255)
 Gate(  1 , r:  3):  M(3  , p: -1 , m: 255)
 Gate(  2 , r:  6):  M(5  , p: -1 , m: 255)
 Gate(  3 , r:  9):  M(11 , p: -1 , m: 255)
 Gate(  4 , r: 12):  M(13 , p: -1 , m: 255)
 Gate(  5 , r: 15):  M(15 , p: -1 , m: 255)
 Gate(  6 , r: 18):  M(17 , p: -1 , m: 255)

depth 5 has 7 measurements
After checking determinism:  Gates on GPU for 5-time step:
 Gate(  0 , r:  0):  M(1  , p: 1  , m: 255)
 Gate(  1 , r:  3):  M(3  , p: -1 , m: 255)
 Gate(  2 , r:  6):  M(5  , p: 5  , m: 255)
 Gate(  3 , r:  9):  M(11 , p: -1 , m: 255)
 Gate(  4 , r: 12):  M(13 , p: -1 , m: 255)
 Gate(  5 , r: 15):  M(15 , p: -1 , m: 255)
 Gate(  6 , r: 18):  M(17 , p: -1 , m: 255)
After determinate measuring:  Gates on GPU for 5-time step:
  M(3  , p: -1 , m: 0)--> Row(23):   00000000000000000000 00010000000000000000 0
offset(60), qubit(15), row(23) x row(35):
 offset(60): aux_xs[b:1, t:0] = 0
 offset(60): aux_xs[b:1, t:1] = 0
 offset(60): aux_xs[b:1, t:2] = 0
 offset(60): aux_xs[b:1, t:3] = 0
 offset(60): aux_zs[b:1, t:4] = 0
 offset(60): aux_zs[b:1, t:5] = 0
 offset(60): aux_zs[b:1, t:6] = 0
 offset(60): aux_zs[b:1, t:7] = 0
 offset(60): aux_ss[b:1, t:8] = 0
 offset(60): aux_ss[b:1, t:9] = 0
 offset(60): aux_ss[b:1, t:10] = 0
 offset(60): aux_ss[b:1, t:11] = 0
  M(11 , p: -1 , m: 0)--> Row(31):   00000000000000000000 00000000000100000000 0
offset(60), qubit(15), row(23) x row(35):
 offset(60): aux_xs[b:3, t:0] = 0
 offset(60): aux_xs[b:3, t:1] = 0
 offset(60): aux_xs[b:3, t:2] = 0
 offset(60): aux_xs[b:3, t:3] = 0
 offset(60): aux_zs[b:3, t:4] = 0
 offset(60): aux_zs[b:3, t:5] = 0
 offset(60): aux_zs[b:3, t:6] = 0
 offset(60): aux_zs[b:3, t:7] = 1
 offset(60): aux_ss[b:3, t:8] = 0
 offset(60): aux_ss[b:3, t:9] = 0
 offset(60): aux_ss[b:3, t:10] = 0
 offset(60): aux_ss[b:3, t:11] = 0
offset(60), qubit(15), row(23) x row(35):
 offset(60): aux_xs[b:2, t:0] = 0
 offset(60): aux_xs[b:2, t:1] = 0
 offset(60): aux_xs[b:2, t:2] = 0
 offset(60): aux_xs[b:2, t:3] = 0
 offset(60): aux_zs[b:2, t:4] = 0
 offset(60): aux_zs[b:2, t:5] = 0
 offset(60): aux_zs[b:2, t:6] = 0
 offset(60): aux_zs[b:2, t:7] = 0
 offset(60): aux_ss[b:2, t:8] = 0
 offset(60): aux_ss[b:2, t:9] = 0
 offset(60): aux_ss[b:2, t:10] = 0
 offset(60): aux_ss[b:2, t:11] = 0
offset(60), qubit(15), row(23) x row(35):
 offset(60): aux_xs[b:4, t:0] = 0
 offset(60): aux_xs[b:4, t:1] = 0
 offset(60): aux_xs[b:4, t:2] = 0
 offset(60): aux_xs[b:4, t:3] = 0
 offset(60): aux_zs[b:4, t:4] = 0
 offset(60): aux_zs[b:4, t:5] = 0
 offset(60): aux_zs[b:4, t:6] = 0
 offset(60): aux_zs[b:4, t:7] = 0
 offset(60): aux_ss[b:4, t:8] = 0
 offset(60): aux_ss[b:4, t:9] = 0
 offset(60): aux_ss[b:4, t:10] = 0
 offset(60): aux_ss[b:4, t:11] = 0
  M(13 , p: -1 , m: 0)--> Row(33):   00000000000000000000 00000000000001000000 0
  M(15 , p: -1 , m: 0)--> Row(23):   00000000000000000000 00010000000000000000 0
offset(72), qubit(17), row(21) x row(29):
 offset(72): aux_xs[b:3, t:0] = 0
 offset(72): aux_xs[b:3, t:1] = 0
 offset(72): aux_xs[b:3, t:2] = 0
 offset(72): aux_xs[b:3, t:3] = 0
 offset(72): aux_zs[b:3, t:4] = 0
 offset(72): aux_zs[b:3, t:5] = 0
 offset(72): aux_zs[b:3, t:6] = 0
 offset(72): aux_zs[b:3, t:7] = 0
 offset(72): aux_ss[b:3, t:8] = 0
 offset(72): aux_ss[b:3, t:9] = 0
 offset(72): aux_ss[b:3, t:10] = 0
 offset(72): aux_ss[b:3, t:11] = 0
  M(15 , p: -1 , m: 0)--> Row(35):   00000000000000000000 00010000000000010000 0
offset(72), qubit(17), row(21) x row(29):
 offset(72): aux_xs[b:2, t:0] = 0
 offset(72): aux_xs[b:2, t:1] = 0
 offset(72): aux_xs[b:2, t:2] = 0
 offset(72): aux_xs[b:2, t:3] = 0
 offset(72): aux_zs[b:2, t:4] = 0
 offset(72): aux_zs[b:2, t:5] = 1
 offset(72): aux_zs[b:2, t:6] = 0
 offset(72): aux_zs[b:2, t:7] = 0
 offset(72): aux_ss[b:2, t:8] = 0
 offset(72): aux_ss[b:2, t:9] = 0
 offset(72): aux_ss[b:2, t:10] = 0
 offset(72): aux_ss[b:2, t:11] = 0
  M(17 , p: -1 , m: 0)--> Row(21):   01000000000000000000 00000000000000000000 0
offset(72), qubit(17), row(21) x row(29):
 offset(72): aux_xs[b:1, t:0] = 0
 offset(72): aux_xs[b:1, t:1] = 0
 offset(72): aux_xs[b:1, t:2] = 0
 offset(72): aux_xs[b:1, t:3] = 0
 offset(72): aux_zs[b:1, t:4] = 0
 offset(72): aux_zs[b:1, t:5] = 0
 offset(72): aux_zs[b:1, t:6] = 0
 offset(72): aux_zs[b:1, t:7] = 0
 offset(72): aux_ss[b:1, t:8] = 0
 offset(72): aux_ss[b:1, t:9] = 0
 offset(72): aux_ss[b:1, t:10] = 0
 offset(72): aux_ss[b:1, t:11] = 0
offset(72), qubit(17), row(21) x row(29):
 offset(72): aux_xs[b:4, t:0] = 0
 offset(72): aux_xs[b:4, t:1] = 0
 offset(72): aux_xs[b:4, t:2] = 0
 offset(72): aux_xs[b:4, t:3] = 0
 offset(72): aux_zs[b:4, t:4] = 0
 offset(72): aux_zs[b:4, t:5] = 0
 offset(72): aux_zs[b:4, t:6] = 0
 offset(72): aux_zs[b:4, t:7] = 0
 offset(72): aux_ss[b:4, t:8] = 0
 offset(72): aux_ss[b:4, t:9] = 0
 offset(72): aux_ss[b:4, t:10] = 0
 offset(72): aux_ss[b:4, t:11] = 0
  M(17 , p: -1 , m: 0)--> Row(29):   00000000000000000000 10000000010000000000 0
offset(72), qubit(17), row(21) x row(37):
 offset(72): aux_xs[b:3, t:0] = 0
 offset(72): aux_xs[b:3, t:1] = 0
 offset(72): aux_xs[b:3, t:2] = 0
 offset(72): aux_xs[b:3, t:3] = 0
 offset(72): aux_zs[b:3, t:4] = 0
 offset(72): aux_zs[b:3, t:5] = 0
 offset(72): aux_zs[b:3, t:6] = 0
 offset(72): aux_zs[b:3, t:7] = 0
 offset(72): aux_ss[b:3, t:8] = 0
 offset(72): aux_ss[b:3, t:9] = 0
 offset(72): aux_ss[b:3, t:10] = 0
 offset(72): aux_ss[b:3, t:11] = 0
offset(60), qubit(15), row(23) x row(35):
 offset(60): aux_xs[b:0, t:0] = 0
 offset(60): aux_xs[b:0, t:1] = 0
 offset(60): aux_xs[b:0, t:2] = 0
 offset(60): aux_xs[b:0, t:3] = 0
 offset(60): aux_zs[b:0, t:4] = 0
 offset(60): aux_zs[b:0, t:5] = 0
 offset(60): aux_zs[b:0, t:6] = 0
 offset(60): aux_zs[b:0, t:7] = 0
 offset(60): aux_ss[b:0, t:8] = 0
 offset(60): aux_ss[b:0, t:9] = 0
 offset(60): aux_ss[b:0, t:10] = 0
 offset(60): aux_ss[b:0, t:11] = 0
offset(72), qubit(17), row(21) x row(37):
 offset(72): aux_xs[b:2, t:0] = 0
 offset(72): aux_xs[b:2, t:1] = 0
 offset(72): aux_xs[b:2, t:2] = 0
 offset(72): aux_xs[b:2, t:3] = 0
 offset(72): aux_zs[b:2, t:4] = 0
 offset(72): aux_zs[b:2, t:5] = 0
 offset(72): aux_zs[b:2, t:6] = 0
 offset(72): aux_zs[b:2, t:7] = 0
 offset(72): aux_ss[b:2, t:8] = 0
 offset(72): aux_ss[b:2, t:9] = 0
 offset(72): aux_ss[b:2, t:10] = 0
 offset(72): aux_ss[b:2, t:11] = 0
offset(72), qubit(17), row(21) x row(29):
 offset(72): aux_xs[b:0, t:0] = 0
 offset(72): aux_xs[b:0, t:1] = 1
 offset(72): aux_xs[b:0, t:2] = 0
 offset(72): aux_xs[b:0, t:3] = 0
 offset(72): aux_zs[b:0, t:4] = 1
 offset(72): aux_zs[b:0, t:5] = 0
 offset(72): aux_zs[b:0, t:6] = 0
 offset(72): aux_zs[b:0, t:7] = 0
 offset(72): aux_ss[b:0, t:8] = 0
 offset(72): aux_ss[b:0, t:9] = 0
 offset(72): aux_ss[b:0, t:10] = 0
 offset(72): aux_ss[b:0, t:11] = 0
offset(72), qubit(17), row(21) x row(37):
 offset(72): aux_xs[b:1, t:0] = 0
 offset(72): aux_xs[b:1, t:1] = 0
 offset(72): aux_xs[b:1, t:2] = 0
 offset(72): aux_xs[b:1, t:3] = 0
 offset(72): aux_zs[b:1, t:4] = 0
 offset(72): aux_zs[b:1, t:5] = 0
 offset(72): aux_zs[b:1, t:6] = 0
 offset(72): aux_zs[b:1, t:7] = 0
 offset(72): aux_ss[b:1, t:8] = 0
 offset(72): aux_ss[b:1, t:9] = 0
 offset(72): aux_ss[b:1, t:10] = 0
 offset(72): aux_ss[b:1, t:11] = 0
  M(17 , p: -1 , m: 0)--> Row(37):   01000000000000000000 10000000010000000100 0
offset(72), qubit(17), row(21) x row(37):
 offset(72): aux_xs[b:4, t:0] = 0
 offset(72): aux_xs[b:4, t:1] = 0
 offset(72): aux_xs[b:4, t:2] = 0
 offset(72): aux_xs[b:4, t:3] = 0
 offset(72): aux_zs[b:4, t:4] = 0
 offset(72): aux_zs[b:4, t:5] = 1
 offset(72): aux_zs[b:4, t:6] = 0
 offset(72): aux_zs[b:4, t:7] = 0
 offset(72): aux_ss[b:4, t:8] = 0
 offset(72): aux_ss[b:4, t:9] = 0
 offset(72): aux_ss[b:4, t:10] = 0
 offset(72): aux_ss[b:4, t:11] = 0
offset(72), qubit(17), row(21) x row(37):
 offset(72): aux_xs[b:0, t:0] = 0
 offset(72): aux_xs[b:0, t:1] = 0
 offset(72): aux_xs[b:0, t:2] = 0
 offset(72): aux_xs[b:0, t:3] = 0
 offset(72): aux_zs[b:0, t:4] = 0
 offset(72): aux_zs[b:0, t:5] = 0
 offset(72): aux_zs[b:0, t:6] = 0
 offset(72): aux_zs[b:0, t:7] = 0
 offset(72): aux_ss[b:0, t:8] = 0
 offset(72): aux_ss[b:0, t:9] = 0
 offset(72): aux_ss[b:0, t:10] = 0
 offset(72): aux_ss[b:0, t:11] = 0
 Gate(  0 , r:  0):  M(1  , p: 1  , m: 255)
 Gate(  1 , r:  3):  M(3  , p: -1 , m: 0)
 Gate(  2 , r:  6):  M(5  , p: 5  , m: 255)
 Gate(  3 , r:  9):  M(11 , p: -1 , m: 0)
 Gate(  4 , r: 12):  M(13 , p: -1 , m: 0)
 Gate(  5 , r: 15):  M(15 , p: -1 , m: 0)
 Gate(  6 , r: 18):  M(17 , p: -1 , m: 0)
Partition 0, step 6: Copying 8 references and 27 buckets (offset by +155) per depth level 6 asynchroneously.. done.
 Gates on GPU for 6-time step:
 Gate(  0 , r:  0):  S(2  )
 Gate(  1 , r:  3):  CX(5  ,16 )
 Gate(  2 , r:  7):  H(6  )
 Gate(  3 , r: 10):  CX(10 ,13 )
 Gate(  4 , r: 14):  CX(12 ,18 )
 Gate(  5 , r: 18):  S(15 )
 Gate(  6 , r: 21):  H(17 )
 Gate(  7 , r: 24):  H(19 )
Partition 0, step 6: Simulating asynchronously using grid(87, 55) and block(2, 64).. done.
Partition 0, step 7: Copying 9 references and 27 buckets (offset by +182) per depth level 7 asynchroneously.. done.
 Gates on GPU for 7-time step:
 Gate(  0 , r:  0):  M(0  , p: -1 , m: 255)
 Gate(  1 , r:  3):  M(1  , p: -1 , m: 255)
 Gate(  2 , r:  6):  M(3  , p: -1 , m: 255)
 Gate(  3 , r:  9):  M(4  , p: -1 , m: 255)
 Gate(  4 , r: 12):  M(7  , p: -1 , m: 255)
 Gate(  5 , r: 15):  M(8  , p: -1 , m: 255)
 Gate(  6 , r: 18):  M(9  , p: -1 , m: 255)
 Gate(  7 , r: 21):  M(11 , p: -1 , m: 255)
 Gate(  8 , r: 24):  M(14 , p: -1 , m: 255)

depth 7 has 9 measurements
After checking determinism:  Gates on GPU for 7-time step:
 Gate(  0 , r:  0):  M(0  , p: -1 , m: 255)
 Gate(  1 , r:  3):  M(1  , p: 1  , m: 255)
 Gate(  2 , r:  6):  M(3  , p: -1 , m: 255)
 Gate(  3 , r:  9):  M(4  , p: -1 , m: 255)
 Gate(  4 , r: 12):  M(7  , p: -1 , m: 255)
 Gate(  5 , r: 15):  M(8  , p: 8  , m: 255)
 Gate(  6 , r: 18):  M(9  , p: -1 , m: 255)
 Gate(  7 , r: 21):  M(11 , p: -1 , m: 255)
 Gate(  8 , r: 24):  M(14 , p: 10 , m: 255)
After determinate measuring:  Gates on GPU for 7-time step:
  M(0  , p: -1 , m: 0)--> Row(20):   00000000000000000000 10000000000000000000 0
offset(72), qubit(9), row(20) x row(29):
 offset(72): aux_xs[b:4, t:0] = 0
 offset(72): aux_xs[b:4, t:1] = 0
 offset(72): aux_xs[b:4, t:2] = 0
 offset(72): aux_xs[b:4, t:3] = 0
 offset(72): aux_zs[b:4, t:4] = 0
 offset(72): aux_zs[b:4, t:5] = 0
 offset(72): aux_zs[b:4, t:6] = 0
 offset(72): aux_zs[b:4, t:7] = 0
 offset(72): aux_ss[b:4, t:8] = 0
 offset(72): aux_ss[b:4, t:9] = 0
 offset(72): aux_ss[b:4, t:10] = 0
 offset(72): aux_ss[b:4, t:11] = 0
  M(3  , p: -1 , m: 0)--> Row(23):   00000000000000000000 00010000000000000000 0
offset(72), qubit(9), row(20) x row(29):
 offset(72): aux_xs[b:2, t:0] = 0
 offset(72): aux_xs[b:2, t:1] = 0
 offset(72): aux_xs[b:2, t:2] = 0
 offset(72): aux_xs[b:2, t:3] = 0
 offset(72): aux_zs[b:2, t:4] = 0
 offset(72): aux_zs[b:2, t:5] = 1
 offset(72): aux_zs[b:2, t:6] = 0
 offset(72): aux_zs[b:2, t:7] = 0
 offset(72): aux_ss[b:2, t:8] = 0
 offset(72): aux_ss[b:2, t:9] = 0
 offset(72): aux_ss[b:2, t:10] = 0
 offset(72): aux_ss[b:2, t:11] = 0
offset(72), qubit(9), row(20) x row(29):
 offset(72): aux_xs[b:3, t:0] = 0
 offset(72): aux_xs[b:3, t:1] = 0
 offset(72): aux_xs[b:3, t:2] = 0
 offset(72): aux_xs[b:3, t:3] = 0
 offset(72): aux_zs[b:3, t:4] = 0
 offset(72): aux_zs[b:3, t:5] = 0
 offset(72): aux_zs[b:3, t:6] = 0
 offset(72): aux_zs[b:3, t:7] = 0
 offset(72): aux_ss[b:3, t:8] = 0
 offset(72): aux_ss[b:3, t:9] = 0
 offset(72): aux_ss[b:3, t:10] = 0
 offset(72): aux_ss[b:3, t:11] = 0
  M(4  , p: -1 , m: 0)--> Row(24):   00000000000000000000 00001000000000000000 0
offset(72), qubit(9), row(20) x row(29):
 offset(72): aux_xs[b:1, t:0] = 0
 offset(72): aux_xs[b:1, t:1] = 0
 offset(72): aux_xs[b:1, t:2] = 0
 offset(72): aux_xs[b:1, t:3] = 0
 offset(72): aux_zs[b:1, t:4] = 0
 offset(72): aux_zs[b:1, t:5] = 0
 offset(72): aux_zs[b:1, t:6] = 0
 offset(72): aux_zs[b:1, t:7] = 0
 offset(72): aux_ss[b:1, t:8] = 0
 offset(72): aux_ss[b:1, t:9] = 0
 offset(72): aux_ss[b:1, t:10] = 0
 offset(72): aux_ss[b:1, t:11] = 0
  M(7  , p: -1 , m: 0)--> Row(27):   00000000000000000000 00000001000000000000 0
  M(9  , p: -1 , m: 0)--> Row(20):   00000000000000000000 10000000000000000000 0
  M(9  , p: -1 , m: 0)--> Row(29):   00000000000000000000 10000000010000000000 0
  M(11 , p: -1 , m: 0)--> Row(31):   00000000000000000000 00000000000100000000 0
offset(72), qubit(9), row(20) x row(29):
 offset(72): aux_xs[b:0, t:0] = 0
 offset(72): aux_xs[b:0, t:1] = 0
 offset(72): aux_xs[b:0, t:2] = 0
 offset(72): aux_xs[b:0, t:3] = 0
 offset(72): aux_zs[b:0, t:4] = 0
 offset(72): aux_zs[b:0, t:5] = 0
 offset(72): aux_zs[b:0, t:6] = 0
 offset(72): aux_zs[b:0, t:7] = 0
 offset(72): aux_ss[b:0, t:8] = 0
 offset(72): aux_ss[b:0, t:9] = 0
 offset(72): aux_ss[b:0, t:10] = 0
 offset(72): aux_ss[b:0, t:11] = 0
 Gate(  0 , r:  0):  M(0  , p: -1 , m: 0)
 Gate(  1 , r:  3):  M(1  , p: 1  , m: 255)
 Gate(  2 , r:  6):  M(3  , p: -1 , m: 0)
 Gate(  3 , r:  9):  M(4  , p: -1 , m: 0)
 Gate(  4 , r: 12):  M(7  , p: -1 , m: 0)
 Gate(  5 , r: 15):  M(8  , p: 8  , m: 255)
 Gate(  6 , r: 18):  M(9  , p: -1 , m: 0)
 Gate(  7 , r: 21):  M(11 , p: -1 , m: 0)
 Gate(  8 , r: 24):  M(14 , p: 10 , m: 255)
Partition 0, step 8: Copying 9 references and 31 buckets (offset by +209) per depth level 8 asynchroneously.. done.
 Gates on GPU for 8-time step:
 Gate(  0 , r:  0):  S(3  )
 Gate(  1 , r:  3):  S(4  )
 Gate(  2 , r:  6):  CX(5  ,14 )
 Gate(  3 , r: 10):  CX(7  ,15 )
 Gate(  4 , r: 14):  H(8  )
 Gate(  5 , r: 17):  S(9  )
 Gate(  6 , r: 20):  H(11 )
 Gate(  7 , r: 23):  CX(12 ,19 )
 Gate(  8 , r: 27):  CX(16 ,18 )
Partition 0, step 8: Simulating asynchronously using grid(87, 55) and block(2, 64).. done.
Partition 0, step 9: Copying 7 references and 21 buckets (offset by +240) per depth level 9 asynchroneously.. done.
 Gates on GPU for 9-time step:
 Gate(  0 , r:  0):  M(0  , p: -1 , m: 255)
 Gate(  1 , r:  3):  M(1  , p: -1 , m: 255)
 Gate(  2 , r:  6):  M(2  , p: -1 , m: 255)
 Gate(  3 , r:  9):  M(6  , p: -1 , m: 255)
 Gate(  4 , r: 12):  M(10 , p: -1 , m: 255)
 Gate(  5 , r: 15):  M(13 , p: -1 , m: 255)
 Gate(  6 , r: 18):  M(17 , p: -1 , m: 255)

depth 9 has 7 measurements
After checking determinism:  Gates on GPU for 9-time step:
 Gate(  0 , r:  0):  M(0  , p: -1 , m: 255)
 Gate(  1 , r:  3):  M(1  , p: 1  , m: 255)
 Gate(  2 , r:  6):  M(2  , p: -1 , m: 255)
 Gate(  3 , r:  9):  M(6  , p: -1 , m: 255)
 Gate(  4 , r: 12):  M(10 , p: 10 , m: 255)
 Gate(  5 , r: 15):  M(13 , p: 10 , m: 255)
 Gate(  6 , r: 18):  M(17 , p: 17 , m: 255)
After determinate measuring:  Gates on GPU for 9-time step:
  M(0  , p: -1 , m: 0)--> Row(20):   00000000000000000000 10000000000000000000 0
  M(2  , p: -1 , m: 0)--> Row(22):   00000000000000000000 00100000000000000000 0
  M(6  , p: -1 , m: 0)--> Row(26):   00000000000000000000 00000010000000000000 0
 Gate(  0 , r:  0):  M(0  , p: -1 , m: 0)
 Gate(  1 , r:  3):  M(1  , p: 1  , m: 255)
 Gate(  2 , r:  6):  M(2  , p: -1 , m: 0)
 Gate(  3 , r:  9):  M(6  , p: -1 , m: 0)
 Gate(  4 , r: 12):  M(10 , p: 10 , m: 255)
 Gate(  5 , r: 15):  M(13 , p: 10 , m: 255)
 Gate(  6 , r: 18):  M(17 , p: 17 , m: 255)
Partition 0, step 10: Copying 10 references and 32 buckets (offset by +261) per depth level 10 asynchroneously.. done.
 Gates on GPU for 10-time step:
 Gate(  0 , r:  0):  S(0  )
 Gate(  1 , r:  3):  H(1  )
 Gate(  2 , r:  6):  S(5  )
 Gate(  3 , r:  9):  H(6  )
 Gate(  4 , r: 12):  H(8  )
 Gate(  5 , r: 15):  CX(9  ,18 )
 Gate(  6 , r: 19):  H(11 )
 Gate(  7 , r: 22):  S(13 )
 Gate(  8 , r: 25):  CX(15 ,17 )
 Gate(  9 , r: 29):  H(19 )
Partition 0, step 10: Simulating asynchronously using grid(87, 55) and block(2, 64).. done.
Partition 0, step 11: Copying 8 references and 24 buckets (offset by +293) per depth level 11 asynchroneously.. done.
 Gates on GPU for 11-time step:
 Gate(  0 , r:  0):  M(2  , p: -1 , m: 255)
 Gate(  1 , r:  3):  M(3  , p: -1 , m: 255)
 Gate(  2 , r:  6):  M(4  , p: -1 , m: 255)
 Gate(  3 , r:  9):  M(7  , p: -1 , m: 255)
 Gate(  4 , r: 12):  M(10 , p: -1 , m: 255)
 Gate(  5 , r: 15):  M(12 , p: -1 , m: 255)
 Gate(  6 , r: 18):  M(14 , p: -1 , m: 255)
 Gate(  7 , r: 21):  M(16 , p: -1 , m: 255)

depth 11 has 8 measurements
After checking determinism:  Gates on GPU for 11-time step:
 Gate(  0 , r:  0):  M(2  , p: -1 , m: 255)
 Gate(  1 , r:  3):  M(3  , p: -1 , m: 255)
 Gate(  2 , r:  6):  M(4  , p: -1 , m: 255)
 Gate(  3 , r:  9):  M(7  , p: -1 , m: 255)
 Gate(  4 , r: 12):  M(10 , p: 10 , m: 255)
 Gate(  5 , r: 15):  M(12 , p: 12 , m: 255)
 Gate(  6 , r: 18):  M(14 , p: 5  , m: 255)
 Gate(  7 , r: 21):  M(16 , p: 5  , m: 255)
After determinate measuring:  Gates on GPU for 11-time step:
  M(2  , p: -1 , m: 0)--> Row(22):   00000000000000000000 00100000000000000000 0
  M(3  , p: -1 , m: 0)--> Row(23):   00000000000000000000 00010000000000000000 0
  M(4  , p: -1 , m: 0)--> Row(24):   00000000000000000000 00001000000000000000 0
  M(7  , p: -1 , m: 0)--> Row(27):   00000000000000000000 00000001000000000000 0
 Gate(  0 , r:  0):  M(2  , p: -1 , m: 0)
 Gate(  1 , r:  3):  M(3  , p: -1 , m: 0)
 Gate(  2 , r:  6):  M(4  , p: -1 , m: 0)
 Gate(  3 , r:  9):  M(7  , p: -1 , m: 0)
 Gate(  4 , r: 12):  M(10 , p: 10 , m: 255)
 Gate(  5 , r: 15):  M(12 , p: 12 , m: 255)
 Gate(  6 , r: 18):  M(14 , p: 5  , m: 255)
 Gate(  7 , r: 21):  M(16 , p: 5  , m: 255)
Partition 0, step 12: Copying 8 references and 27 buckets (offset by +317) per depth level 12 asynchroneously.. done.
 Gates on GPU for 12-time step:
 Gate(  0 , r:  0):  CX(1  ,8  )
 Gate(  1 , r:  4):  H(2  )
 Gate(  2 , r:  7):  CX(3  ,10 )
 Gate(  3 , r: 11):  H(9  )
 Gate(  4 , r: 14):  H(11 )
 Gate(  5 , r: 17):  S(16 )
 Gate(  6 , r: 20):  S(17 )
 Gate(  7 , r: 23):  CX(18 ,19 )
Partition 0, step 12: Simulating asynchronously using grid(87, 55) and block(2, 64).. done.
Partition 0, step 13: Copying 9 references and 27 buckets (offset by +344) per depth level 13 asynchroneously.. done.
 Gates on GPU for 13-time step:
 Gate(  0 , r:  0):  M(0  , p: -1 , m: 255)
 Gate(  1 , r:  3):  M(4  , p: -1 , m: 255)
 Gate(  2 , r:  6):  M(5  , p: -1 , m: 255)
 Gate(  3 , r:  9):  M(6  , p: -1 , m: 255)
 Gate(  4 , r: 12):  M(7  , p: -1 , m: 255)
 Gate(  5 , r: 15):  M(12 , p: -1 , m: 255)
 Gate(  6 , r: 18):  M(13 , p: -1 , m: 255)
 Gate(  7 , r: 21):  M(14 , p: -1 , m: 255)
 Gate(  8 , r: 24):  M(15 , p: -1 , m: 255)

depth 13 has 9 measurements
After checking determinism:  Gates on GPU for 13-time step:
 Gate(  0 , r:  0):  M(0  , p: -1 , m: 255)
 Gate(  1 , r:  3):  M(4  , p: -1 , m: 255)
 Gate(  2 , r:  6):  M(5  , p: 5  , m: 255)
 Gate(  3 , r:  9):  M(6  , p: 6  , m: 255)
 Gate(  4 , r: 12):  M(7  , p: -1 , m: 255)
 Gate(  5 , r: 15):  M(12 , p: 12 , m: 255)
 Gate(  6 , r: 18):  M(13 , p: 10 , m: 255)
 Gate(  7 , r: 21):  M(14 , p: 5  , m: 255)
 Gate(  8 , r: 24):  M(15 , p: -1 , m: 255)
After determinate measuring:  Gates on GPU for 13-time step:
  M(15 , p: -1 , m: 0)--> Row(23):   00000000000000000000 00010000000000000000 0
offset(96), qubit(15), row(23) x row(27):
 offset(96): aux_xs[b:2, t:0] = 0
 offset(96): aux_xs[b:2, t:1] = 0
 offset(96): aux_xs[b:2, t:2] = 0
 offset(96): aux_xs[b:2, t:3] = 0
 offset(96): aux_zs[b:2, t:4] = 0
 offset(96): aux_zs[b:2, t:5] = 0
 offset(96): aux_zs[b:2, t:6] = 0
 offset(96): aux_zs[b:2, t:7] = 0
 offset(96): aux_ss[b:2, t:8] = 0
 offset(96): aux_ss[b:2, t:9] = 0
 offset(96): aux_ss[b:2, t:10] = 0
 offset(96): aux_ss[b:2, t:11] = 0
  M(0  , p: -1 , m: 0)--> Row(20):   00000000000000000000 10000000000000000000 0
offset(96), qubit(15), row(23) x row(27):
 offset(96): aux_xs[b:3, t:0] = 0
 offset(96): aux_xs[b:3, t:1] = 0
 offset(96): aux_xs[b:3, t:2] = 0
 offset(96): aux_xs[b:3, t:3] = 0
 offset(96): aux_zs[b:3, t:4] = 0
 offset(96): aux_zs[b:3, t:5] = 0
 offset(96): aux_zs[b:3, t:6] = 0
 offset(96): aux_zs[b:3, t:7] = 0
 offset(96): aux_ss[b:3, t:8] = 0
 offset(96): aux_ss[b:3, t:9] = 0
 offset(96): aux_ss[b:3, t:10] = 0
 offset(96): aux_ss[b:3, t:11] = 0
offset(96), qubit(15), row(23) x row(27):
 offset(96): aux_xs[b:1, t:0] = 0
 offset(96): aux_xs[b:1, t:1] = 0
 offset(96): aux_xs[b:1, t:2] = 0
 offset(96): aux_xs[b:1, t:3] = 0
 offset(96): aux_zs[b:1, t:4] = 0
 offset(96): aux_zs[b:1, t:5] = 0
 offset(96): aux_zs[b:1, t:6] = 0
 offset(96): aux_zs[b:1, t:7] = 1
 offset(96): aux_ss[b:1, t:8] = 0
 offset(96): aux_ss[b:1, t:9] = 0
 offset(96): aux_ss[b:1, t:10] = 0
 offset(96): aux_ss[b:1, t:11] = 0
  M(4  , p: -1 , m: 0)--> Row(24):   00000000000000000000 00001000000000000000 0
offset(96), qubit(15), row(23) x row(27):
 offset(96): aux_xs[b:4, t:0] = 0
 offset(96): aux_xs[b:4, t:1] = 0
 offset(96): aux_xs[b:4, t:2] = 0
 offset(96): aux_xs[b:4, t:3] = 0
 offset(96): aux_zs[b:4, t:4] = 0
 offset(96): aux_zs[b:4, t:5] = 0
 offset(96): aux_zs[b:4, t:6] = 0
 offset(96): aux_zs[b:4, t:7] = 0
 offset(96): aux_ss[b:4, t:8] = 0
 offset(96): aux_ss[b:4, t:9] = 0
 offset(96): aux_ss[b:4, t:10] = 0
 offset(96): aux_ss[b:4, t:11] = 0
  M(7  , p: -1 , m: 0)--> Row(27):   00000000000000000000 00000001000000000000 0
  M(15 , p: -1 , m: 0)--> Row(27):   00000000000000000000 00000001000000000000 0
offset(96), qubit(15), row(23) x row(27):
 offset(96): aux_xs[b:0, t:0] = 0
 offset(96): aux_xs[b:0, t:1] = 0
 offset(96): aux_xs[b:0, t:2] = 0
 offset(96): aux_xs[b:0, t:3] = 0
 offset(96): aux_zs[b:0, t:4] = 0
 offset(96): aux_zs[b:0, t:5] = 0
 offset(96): aux_zs[b:0, t:6] = 0
 offset(96): aux_zs[b:0, t:7] = 1
 offset(96): aux_ss[b:0, t:8] = 0
 offset(96): aux_ss[b:0, t:9] = 0
 offset(96): aux_ss[b:0, t:10] = 0
 offset(96): aux_ss[b:0, t:11] = 0
  M(15 , p: -1 , m: 0)--> Row(35):   00000000000000000000 00010001000000010000 0
offset(96), qubit(15), row(23) x row(35):
 offset(96): aux_xs[b:1, t:0] = 0
 offset(96): aux_xs[b:1, t:1] = 0
 offset(96): aux_xs[b:1, t:2] = 0
 offset(96): aux_xs[b:1, t:3] = 0
 offset(96): aux_zs[b:1, t:4] = 0
 offset(96): aux_zs[b:1, t:5] = 0
 offset(96): aux_zs[b:1, t:6] = 0
 offset(96): aux_zs[b:1, t:7] = 0
 offset(96): aux_ss[b:1, t:8] = 0
 offset(96): aux_ss[b:1, t:9] = 0
 offset(96): aux_ss[b:1, t:10] = 0
 offset(96): aux_ss[b:1, t:11] = 0
offset(96), qubit(15), row(23) x row(35):
 offset(96): aux_xs[b:2, t:0] = 0
 offset(96): aux_xs[b:2, t:1] = 0
 offset(96): aux_xs[b:2, t:2] = 0
 offset(96): aux_xs[b:2, t:3] = 0
 offset(96): aux_zs[b:2, t:4] = 0
 offset(96): aux_zs[b:2, t:5] = 0
 offset(96): aux_zs[b:2, t:6] = 0
 offset(96): aux_zs[b:2, t:7] = 0
 offset(96): aux_ss[b:2, t:8] = 0
 offset(96): aux_ss[b:2, t:9] = 0
 offset(96): aux_ss[b:2, t:10] = 0
 offset(96): aux_ss[b:2, t:11] = 0
offset(96), qubit(15), row(23) x row(35):
 offset(96): aux_xs[b:4, t:0] = 0
 offset(96): aux_xs[b:4, t:1] = 0
 offset(96): aux_xs[b:4, t:2] = 0
 offset(96): aux_xs[b:4, t:3] = 0
 offset(96): aux_zs[b:4, t:4] = 0
 offset(96): aux_zs[b:4, t:5] = 0
 offset(96): aux_zs[b:4, t:6] = 0
 offset(96): aux_zs[b:4, t:7] = 0
 offset(96): aux_ss[b:4, t:8] = 0
 offset(96): aux_ss[b:4, t:9] = 0
 offset(96): aux_ss[b:4, t:10] = 0
 offset(96): aux_ss[b:4, t:11] = 0
offset(96), qubit(15), row(23) x row(35):
 offset(96): aux_xs[b:3, t:0] = 0
 offset(96): aux_xs[b:3, t:1] = 0
 offset(96): aux_xs[b:3, t:2] = 0
 offset(96): aux_xs[b:3, t:3] = 0
 offset(96): aux_zs[b:3, t:4] = 0
 offset(96): aux_zs[b:3, t:5] = 0
 offset(96): aux_zs[b:3, t:6] = 0
 offset(96): aux_zs[b:3, t:7] = 1
 offset(96): aux_ss[b:3, t:8] = 0
 offset(96): aux_ss[b:3, t:9] = 0
 offset(96): aux_ss[b:3, t:10] = 0
 offset(96): aux_ss[b:3, t:11] = 0
offset(96), qubit(15), row(23) x row(35):
 offset(96): aux_xs[b:0, t:0] = 0
 offset(96): aux_xs[b:0, t:1] = 0
 offset(96): aux_xs[b:0, t:2] = 0
 offset(96): aux_xs[b:0, t:3] = 0
 offset(96): aux_zs[b:0, t:4] = 0
 offset(96): aux_zs[b:0, t:5] = 0
 offset(96): aux_zs[b:0, t:6] = 0
 offset(96): aux_zs[b:0, t:7] = 0
 offset(96): aux_ss[b:0, t:8] = 0
 offset(96): aux_ss[b:0, t:9] = 0
 offset(96): aux_ss[b:0, t:10] = 0
 offset(96): aux_ss[b:0, t:11] = 0
 Gate(  0 , r:  0):  M(0  , p: -1 , m: 0)
 Gate(  1 , r:  3):  M(4  , p: -1 , m: 0)
 Gate(  2 , r:  6):  M(5  , p: 5  , m: 255)
 Gate(  3 , r:  9):  M(6  , p: 6  , m: 255)
 Gate(  4 , r: 12):  M(7  , p: -1 , m: 0)
 Gate(  5 , r: 15):  M(12 , p: 12 , m: 255)
 Gate(  6 , r: 18):  M(13 , p: 10 , m: 255)
 Gate(  7 , r: 21):  M(14 , p: 5  , m: 255)
 Gate(  8 , r: 24):  M(15 , p: -1 , m: 0)
Partition 0, step 14: Copying 12 references and 37 buckets (offset by +371) per depth level 14 asynchroneously.. done.
 Gates on GPU for 14-time step:
 Gate(  0 , r:  0):  CX(0  ,12 )
 Gate(  1 , r:  4):  S(1  )
 Gate(  2 , r:  7):  S(3  )
 Gate(  3 , r: 10):  H(6  )
 Gate(  4 , r: 13):  S(7  )
 Gate(  5 , r: 16):  H(8  )
 Gate(  6 , r: 19):  S(9  )
 Gate(  7 , r: 22):  S(10 )
 Gate(  8 , r: 25):  S(11 )
 Gate(  9 , r: 28):  S(17 )
 Gate( 10 , r: 31):  H(18 )
 Gate( 11 , r: 34):  S(19 )
Partition 0, step 14: Simulating asynchronously using grid(87, 55) and block(2, 64).. done.
Partition 0, step 15: Copying 7 references and 21 buckets (offset by +408) per depth level 15 asynchroneously.. done.
 Gates on GPU for 15-time step:
 Gate(  0 , r:  0):  M(2  , p: -1 , m: 255)
 Gate(  1 , r:  3):  M(4  , p: -1 , m: 255)
 Gate(  2 , r:  6):  M(5  , p: -1 , m: 255)
 Gate(  3 , r:  9):  M(13 , p: -1 , m: 255)
 Gate(  4 , r: 12):  M(14 , p: -1 , m: 255)
 Gate(  5 , r: 15):  M(15 , p: -1 , m: 255)
 Gate(  6 , r: 18):  M(16 , p: -1 , m: 255)

depth 15 has 7 measurements
After checking determinism:  Gates on GPU for 15-time step:
 Gate(  0 , r:  0):  M(2  , p: 2  , m: 255)
 Gate(  1 , r:  3):  M(4  , p: -1 , m: 255)
 Gate(  2 , r:  6):  M(5  , p: 5  , m: 255)
 Gate(  3 , r:  9):  M(13 , p: 10 , m: 255)
 Gate(  4 , r: 12):  M(14 , p: 5  , m: 255)
 Gate(  5 , r: 15):  M(15 , p: -1 , m: 255)
 Gate(  6 , r: 18):  M(16 , p: 5  , m: 255)
After determinate measuring:  Gates on GPU for 15-time step:
  M(4  , p: -1 , m: 0)--> Row(24):   00000000000000000000 00001000000000000000 0
offset(60), qubit(15), row(23) x row(27):
 offset(60): aux_xs[b:4, t:0] = 0
 offset(60): aux_xs[b:4, t:1] = 0
 offset(60): aux_xs[b:4, t:2] = 0
 offset(60): aux_xs[b:4, t:3] = 0
 offset(60): aux_zs[b:4, t:4] = 0
 offset(60): aux_zs[b:4, t:5] = 0
 offset(60): aux_zs[b:4, t:6] = 0
 offset(60): aux_zs[b:4, t:7] = 0
 offset(60): aux_ss[b:4, t:8] = 0
 offset(60): aux_ss[b:4, t:9] = 0
 offset(60): aux_ss[b:4, t:10] = 0
 offset(60): aux_ss[b:4, t:11] = 0
offset(60), qubit(15), row(23) x row(27):
 offset(60): aux_xs[b:1, t:0] = 0
 offset(60): aux_xs[b:1, t:1] = 0
 offset(60): aux_xs[b:1, t:2] = 0
 offset(60): aux_xs[b:1, t:3] = 0
 offset(60): aux_zs[b:1, t:4] = 0
 offset(60): aux_zs[b:1, t:5] = 0
 offset(60): aux_zs[b:1, t:6] = 0
 offset(60): aux_zs[b:1, t:7] = 1
 offset(60): aux_ss[b:1, t:8] = 0
 offset(60): aux_ss[b:1, t:9] = 0
 offset(60): aux_ss[b:1, t:10] = 0
 offset(60): aux_ss[b:1, t:11] = 0
offset(60), qubit(15), row(23) x row(27):
 offset(60): aux_xs[b:2, t:0] = 0
 offset(60): aux_xs[b:2, t:1] = 0
 offset(60): aux_xs[b:2, t:2] = 0
 offset(60): aux_xs[b:2, t:3] = 0
 offset(60): aux_zs[b:2, t:4] = 0
 offset(60): aux_zs[b:2, t:5] = 0
 offset(60): aux_zs[b:2, t:6] = 0
 offset(60): aux_zs[b:2, t:7] = 0
 offset(60): aux_ss[b:2, t:8] = 0
 offset(60): aux_ss[b:2, t:9] = 0
 offset(60): aux_ss[b:2, t:10] = 0
 offset(60): aux_ss[b:2, t:11] = 0
offset(60), qubit(15), row(23) x row(27):
 offset(60): aux_xs[b:3, t:0] = 0
 offset(60): aux_xs[b:3, t:1] = 0
 offset(60): aux_xs[b:3, t:2] = 0
 offset(60): aux_xs[b:3, t:3] = 0
 offset(60): aux_zs[b:3, t:4] = 0
 offset(60): aux_zs[b:3, t:5] = 0
 offset(60): aux_zs[b:3, t:6] = 0
 offset(60): aux_zs[b:3, t:7] = 0
 offset(60): aux_ss[b:3, t:8] = 0
 offset(60): aux_ss[b:3, t:9] = 0
 offset(60): aux_ss[b:3, t:10] = 0
 offset(60): aux_ss[b:3, t:11] = 0
  M(15 , p: -1 , m: 0)--> Row(23):   00000000000000000000 00010000000000000000 0
  M(15 , p: -1 , m: 0)--> Row(27):   00000000000000000000 00000001000000000000 0
offset(60), qubit(15), row(23) x row(35):
 offset(60): aux_xs[b:1, t:0] = 0
 offset(60): aux_xs[b:1, t:1] = 0
 offset(60): aux_xs[b:1, t:2] = 0
 offset(60): aux_xs[b:1, t:3] = 0
 offset(60): aux_zs[b:1, t:4] = 0
 offset(60): aux_zs[b:1, t:5] = 0
 offset(60): aux_zs[b:1, t:6] = 0
 offset(60): aux_zs[b:1, t:7] = 0
 offset(60): aux_ss[b:1, t:8] = 0
 offset(60): aux_ss[b:1, t:9] = 0
 offset(60): aux_ss[b:1, t:10] = 0
 offset(60): aux_ss[b:1, t:11] = 0
offset(60), qubit(15), row(23) x row(27):
 offset(60): aux_xs[b:0, t:0] = 0
 offset(60): aux_xs[b:0, t:1] = 0
 offset(60): aux_xs[b:0, t:2] = 0
 offset(60): aux_xs[b:0, t:3] = 0
 offset(60): aux_zs[b:0, t:4] = 0
 offset(60): aux_zs[b:0, t:5] = 0
 offset(60): aux_zs[b:0, t:6] = 0
 offset(60): aux_zs[b:0, t:7] = 1
 offset(60): aux_ss[b:0, t:8] = 0
 offset(60): aux_ss[b:0, t:9] = 0
 offset(60): aux_ss[b:0, t:10] = 0
 offset(60): aux_ss[b:0, t:11] = 0
  M(15 , p: -1 , m: 0)--> Row(35):   00000000000000000000 00010001000000010000 0
offset(60), qubit(15), row(23) x row(35):
 offset(60): aux_xs[b:4, t:0] = 0
 offset(60): aux_xs[b:4, t:1] = 0
 offset(60): aux_xs[b:4, t:2] = 0
 offset(60): aux_xs[b:4, t:3] = 0
 offset(60): aux_zs[b:4, t:4] = 0
 offset(60): aux_zs[b:4, t:5] = 0
 offset(60): aux_zs[b:4, t:6] = 0
 offset(60): aux_zs[b:4, t:7] = 0
 offset(60): aux_ss[b:4, t:8] = 0
 offset(60): aux_ss[b:4, t:9] = 0
 offset(60): aux_ss[b:4, t:10] = 0
 offset(60): aux_ss[b:4, t:11] = 0
offset(60), qubit(15), row(23) x row(35):
 offset(60): aux_xs[b:3, t:0] = 0
 offset(60): aux_xs[b:3, t:1] = 0
 offset(60): aux_xs[b:3, t:2] = 0
 offset(60): aux_xs[b:3, t:3] = 0
 offset(60): aux_zs[b:3, t:4] = 0
 offset(60): aux_zs[b:3, t:5] = 0
 offset(60): aux_zs[b:3, t:6] = 0
 offset(60): aux_zs[b:3, t:7] = 1
 offset(60): aux_ss[b:3, t:8] = 0
 offset(60): aux_ss[b:3, t:9] = 0
 offset(60): aux_ss[b:3, t:10] = 0
 offset(60): aux_ss[b:3, t:11] = 0
offset(60), qubit(15), row(23) x row(35):
 offset(60): aux_xs[b:2, t:0] = 0
 offset(60): aux_xs[b:2, t:1] = 0
 offset(60): aux_xs[b:2, t:2] = 0
 offset(60): aux_xs[b:2, t:3] = 0
 offset(60): aux_zs[b:2, t:4] = 0
 offset(60): aux_zs[b:2, t:5] = 0
 offset(60): aux_zs[b:2, t:6] = 0
 offset(60): aux_zs[b:2, t:7] = 0
 offset(60): aux_ss[b:2, t:8] = 0
 offset(60): aux_ss[b:2, t:9] = 0
 offset(60): aux_ss[b:2, t:10] = 0
 offset(60): aux_ss[b:2, t:11] = 0
offset(60), qubit(15), row(23) x row(35):
 offset(60): aux_xs[b:0, t:0] = 0
 offset(60): aux_xs[b:0, t:1] = 0
 offset(60): aux_xs[b:0, t:2] = 0
 offset(60): aux_xs[b:0, t:3] = 0
 offset(60): aux_zs[b:0, t:4] = 0
 offset(60): aux_zs[b:0, t:5] = 0
 offset(60): aux_zs[b:0, t:6] = 0
 offset(60): aux_zs[b:0, t:7] = 0
 offset(60): aux_ss[b:0, t:8] = 0
 offset(60): aux_ss[b:0, t:9] = 0
 offset(60): aux_ss[b:0, t:10] = 0
 offset(60): aux_ss[b:0, t:11] = 0
 Gate(  0 , r:  0):  M(2  , p: 2  , m: 255)
 Gate(  1 , r:  3):  M(4  , p: -1 , m: 0)
 Gate(  2 , r:  6):  M(5  , p: 5  , m: 255)
 Gate(  3 , r:  9):  M(13 , p: 10 , m: 255)
 Gate(  4 , r: 12):  M(14 , p: 5  , m: 255)
 Gate(  5 , r: 15):  M(15 , p: -1 , m: 0)
 Gate(  6 , r: 18):  M(16 , p: 5  , m: 255)
Partition 0, step 16: Copying 10 references and 33 buckets (offset by +429) per depth level 16 asynchroneously.. done.
 Gates on GPU for 16-time step:
 Gate(  0 , r:  0):  S(1  )
 Gate(  1 , r:  3):  CX(3  ,6  )
 Gate(  2 , r:  7):  H(5  )
 Gate(  3 , r: 10):  S(7  )
 Gate(  4 , r: 13):  CX(8  ,18 )
 Gate(  5 , r: 17):  S(10 )
 Gate(  6 , r: 20):  S(11 )
 Gate(  7 , r: 23):  S(13 )
 Gate(  8 , r: 26):  CX(14 ,15 )
 Gate(  9 , r: 30):  H(16 )
Partition 0, step 16: Simulating asynchronously using grid(87, 55) and block(2, 64).. done.
Partition 0, step 17: Copying 6 references and 18 buckets (offset by +462) per depth level 17 asynchroneously.. done.
 Gates on GPU for 17-time step:
 Gate(  0 , r:  0):  M(0  , p: -1 , m: 255)
 Gate(  1 , r:  3):  M(2  , p: -1 , m: 255)
 Gate(  2 , r:  6):  M(4  , p: -1 , m: 255)
 Gate(  3 , r:  9):  M(9  , p: -1 , m: 255)
 Gate(  4 , r: 12):  M(12 , p: -1 , m: 255)
 Gate(  5 , r: 15):  M(17 , p: -1 , m: 255)

depth 17 has 6 measurements
After checking determinism:  Gates on GPU for 17-time step:
 Gate(  0 , r:  0):  M(0  , p: -1 , m: 255)
 Gate(  1 , r:  3):  M(2  , p: 2  , m: 255)
 Gate(  2 , r:  6):  M(4  , p: -1 , m: 255)
 Gate(  3 , r:  9):  M(9  , p: 9  , m: 255)
 Gate(  4 , r: 12):  M(12 , p: 12 , m: 255)
 Gate(  5 , r: 15):  M(17 , p: 17 , m: 255)
After determinate measuring:  Gates on GPU for 17-time step:
  M(0  , p: -1 , m: 0)--> Row(20):   00000000000000000000 10000000000000000000 0
  M(4  , p: -1 , m: 0)--> Row(24):   00000000000000000000 00001000000000000000 0
 Gate(  0 , r:  0):  M(0  , p: -1 , m: 0)
 Gate(  1 , r:  3):  M(2  , p: 2  , m: 255)
 Gate(  2 , r:  6):  M(4  , p: -1 , m: 0)
 Gate(  3 , r:  9):  M(9  , p: 9  , m: 255)
 Gate(  4 , r: 12):  M(12 , p: 12 , m: 255)
 Gate(  5 , r: 15):  M(17 , p: 17 , m: 255)
Partition 0, step 18: Copying 10 references and 31 buckets (offset by +480) per depth level 18 asynchroneously.. done.
 Gates on GPU for 18-time step:
 Gate(  0 , r:  0):  H(1  )
 Gate(  1 , r:  3):  S(2  )
 Gate(  2 , r:  6):  H(3  )
 Gate(  3 , r:  9):  S(4  )
 Gate(  4 , r: 12):  S(6  )
 Gate(  5 , r: 15):  CX(8  ,17 )
 Gate(  6 , r: 19):  S(9  )
 Gate(  7 , r: 22):  S(11 )
 Gate(  8 , r: 25):  S(13 )
 Gate(  9 , r: 28):  S(18 )
Partition 0, step 18: Simulating asynchronously using grid(87, 55) and block(2, 64).. done.
Partition 0, step 19: Copying 8 references and 24 buckets (offset by +511) per depth level 19 asynchroneously.. done.
 Gates on GPU for 19-time step:
 Gate(  0 , r:  0):  M(0  , p: -1 , m: 255)
 Gate(  1 , r:  3):  M(5  , p: -1 , m: 255)
 Gate(  2 , r:  6):  M(7  , p: -1 , m: 255)
 Gate(  3 , r:  9):  M(10 , p: -1 , m: 255)
 Gate(  4 , r: 12):  M(12 , p: -1 , m: 255)
 Gate(  5 , r: 15):  M(14 , p: -1 , m: 255)
 Gate(  6 , r: 18):  M(15 , p: -1 , m: 255)
 Gate(  7 , r: 21):  M(16 , p: -1 , m: 255)

depth 19 has 8 measurements
After checking determinism:  Gates on GPU for 19-time step:
 Gate(  0 , r:  0):  M(0  , p: -1 , m: 255)
 Gate(  1 , r:  3):  M(5  , p: 5  , m: 255)
 Gate(  2 , r:  6):  M(7  , p: -1 , m: 255)
 Gate(  3 , r:  9):  M(10 , p: 10 , m: 255)
 Gate(  4 , r: 12):  M(12 , p: 12 , m: 255)
 Gate(  5 , r: 15):  M(14 , p: 5  , m: 255)
 Gate(  6 , r: 18):  M(15 , p: 5  , m: 255)
 Gate(  7 , r: 21):  M(16 , p: 5  , m: 255)
After determinate measuring:  Gates on GPU for 19-time step:
  M(0  , p: -1 , m: 0)--> Row(20):   00000000000000000000 10000000000000000000 0
  M(7  , p: -1 , m: 0)--> Row(27):   00000000000000000000 00000001000000000000 0
 Gate(  0 , r:  0):  M(0  , p: -1 , m: 0)
 Gate(  1 , r:  3):  M(5  , p: 5  , m: 255)
 Gate(  2 , r:  6):  M(7  , p: -1 , m: 0)
 Gate(  3 , r:  9):  M(10 , p: 10 , m: 255)
 Gate(  4 , r: 12):  M(12 , p: 12 , m: 255)
 Gate(  5 , r: 15):  M(14 , p: 5  , m: 255)
 Gate(  6 , r: 18):  M(15 , p: 5  , m: 255)
 Gate(  7 , r: 21):  M(16 , p: 5  , m: 255)
[38;5;205m----------[ [38;5;187mStatistics[38;5;205m ]--------------------------------------------------------------------
 [38;5;187mInitial time                   : [38;5;106m0.028         msec[38;5;205m
 [38;5;187mSchedule time                  : [38;5;106m0.025         msec[38;5;205m
 [38;5;187mSimulation time                : [38;5;106m77.207        msec[38;5;205m
 [38;5;187mPower consumption              : [38;5;106m46.626        watt[38;5;205m
 [38;5;187mEnergy consumption             : [38;5;106m3.600         joules[38;5;205m
 [38;5;187mTableau interleaving           : [38;5;106mdisabled      [38;5;205m
 [38;5;187mTableau word size              : [38;5;106m8 bits      [38;5;205m
 [38;5;187mTableau partitions             : [38;5;106m1           [38;5;205m
 [38;5;187mTableau memory                 : [38;5;106m0.000         GB[38;5;205m
 [38;5;187mTableau step speed             : [38;5;106m0.000         GB/sec[38;5;205m
 [38;5;187mTableau initial states         : [38;5;106m1           [38;5;205m
 [38;5;187mCircuit depth                  : [38;5;106m20          [38;5;205m
 [38;5;187mCircuit qubits                 : [38;5;106m20          [38;5;205m
 [38;5;187mCircuit memory                 : [38;5;106m0.003         MB[38;5;205m
 [38;5;187mMaximum parallel gates         : [38;5;106m19          [38;5;205m
 [38;5;187mClifford gates                 : [38;5;106m169         [38;5;205m
 [38;5;187m I                             : [38;5;106m0            (%0  )[38;5;205m
 [38;5;187m Z                             : [38;5;106m0            (%0  )[38;5;205m
 [38;5;187m X                             : [38;5;106m0            (%0  )[38;5;205m
 [38;5;187m Y                             : [38;5;106m0            (%0  )[38;5;205m
 [38;5;187m H                             : [38;5;106m30           (%18 )[38;5;205m
 [38;5;187m S                             : [38;5;106m40           (%24 )[38;5;205m
 [38;5;187m S_DAG                         : [38;5;106m0            (%0  )[38;5;205m
 [38;5;187m M                             : [38;5;106m71           (%42 )[38;5;205m
 [38;5;187m CX                            : [38;5;106m28           (%17 )[38;5;205m
 [38;5;187m CY                            : [38;5;106m0            (%0  )[38;5;205m
 [38;5;187m CZ                            : [38;5;106m0            (%0  )[38;5;205m
 [38;5;187m SWAP                          : [38;5;106m0            (%0  )[38;5;205m
 [38;5;187m ISWAP                         : [38;5;106m0            (%0  )[38;5;205m
[38;5;205m----------[ [38;5;187mExit[38;5;205m ]--------------------------------------------------------------------------
Freeing CPU memory pool.. done.
Freeing GPU memory pool.. done.
 --------------------------------------------------------------------------------------------
